from aiogram import F, Router, types, Bot
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from datetime import datetime
import random
from dotenv import load_dotenv
import os
load_dotenv()

user_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã"), KeyboardButton(text="üõç –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑")],
        [KeyboardButton(text="üì¶ –í –Ω–∞–ª–∏—á–∏–∏"), KeyboardButton(text="üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞")],
    ],
    resize_keyboard=True
)

class OrderForm(StatesGroup):
    link = State()
    details = State()
    quantity = State()

class EditForm(StatesGroup):
    wait_code = State()
    wait_new_details = State()

class PaymentForm(StatesGroup):
    waiting_amount = State()

class SupportForm(StatesGroup):
    waiting_message = State()

def generate_order_code():
    return f"{random.randint(1000, 9999)}"

def register_user_handlers(dp, conn, cursor, bot, ADMIN_IDS):
    router = Router()


    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥, –∑–∞–∫–∞–∑–æ–≤, –æ–ø–ª–∞—Ç—ã, –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    @router.message(F.text.in_(["üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã", "üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞", "üì¶ –í –Ω–∞–ª–∏—á–∏–∏", "üõç –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑"]))
    async def handle_main_menu_buttons(message: Message, state: FSMContext):
        await state.clear()
        if message.text == "üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞":
            await state.set_state(SupportForm.waiting_message)
            await message.answer("üì© –ù–∞–ø–∏—à–∏—Ç–µ –í–∞—à –≤–æ–ø—Ä–æ—Å. –ú—ã –æ—Ç–≤–µ—Ç–∏–º –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ.", reply_markup=user_menu)
        elif message.text == "üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã":
            cursor.execute("SELECT code, link, details, quantity, status, created_at, amount FROM orders WHERE user_id = ?", (message.from_user.id,))
            rows = cursor.fetchall()
            if not rows:
                return await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.", reply_markup=user_menu)
            for i, row in enumerate(rows, 1):
                code, link, details, quantity, status, created_at, amount = row
                product_link = f'<a href="{link}">–¢–æ–≤–∞—Ä {i}</a>' if link.startswith("http") else f"–¢–æ–≤–∞—Ä {i}"



                if status == "–û–ø–ª–∞—á–µ–Ω":
                    status_display = "üí≥ –û–ø–ª–∞—á–µ–Ω"
                elif status == "–í –æ–∂–∏–¥–∞–Ω–∏–∏":
                    status_display = "üü† –í –æ–∂–∏–¥–∞–Ω–∏–∏"
                elif status == "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω":
                    status_display = "üöö –û—Ç–ø—Ä–∞–≤–ª–µ–Ω"
                else:
                    status_display = status

                text = (
                    f"# {code}\n"
                    f"üîó {product_link}\n"
                    f"üìå {details}\n"
                    f"üî¢ {quantity} —à—Ç\n"
                    f"{status_display}\n"
                    f"üí∞ –°—É–º–º–∞: {amount or '‚Äî'} ‚ÇΩ"
                )
                buttons = None
                if status == "–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã" and amount:
                    buttons = InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", callback_data=f"pay_{code}")]
                    ])
                elif status not in ["–û–ø–ª–∞—á–µ–Ω", "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω", "üí≥ –û–ø–ª–∞—á–µ–Ω", "‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω", "üïì –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è",
                                    "–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã"]:
                    buttons = InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data=f"edit_{code}"),
                         InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{code}")]
                    ])

                await message.answer(text, reply_markup=buttons, parse_mode="HTML", disable_web_page_preview=True)
        elif message.text == "üì¶ –í –Ω–∞–ª–∏—á–∏–∏":
            await message.answer(
                '<b>üì¶ –¢–æ–≤–∞—Ä—ã –≤ –Ω–∞–ª–∏—á–∏–∏:</b>\nüëâ <a href="https://t.me/kitaychik_shop">–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª</a>',
                parse_mode="HTML", reply_markup=user_menu)

        elif message.text == "üõç –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑":
            await message.answer("üîó –ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä c aliexpress.ru wildberries.ru ozon.ru –∏–ª–∏ –¥—Ä—É–≥–æ–≥–æ —Å–∞–π—Ç–∞:", reply_markup=user_menu)
            await state.set_state(OrderForm.link)

    @router.callback_query(F.data == "start_order")
    async def handle_start_order_callback(callback: types.CallbackQuery, state: FSMContext):
        await callback.message.delete()
        await callback.message.answer("üîó –ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä —Å aliexpress.ru wildberries.ru ozon.ru –∏–ª–∏ –¥—Ä—É–≥–æ–≥–æ —Å–∞–π—Ç–∞:", reply_markup=user_menu)
        await state.set_state(OrderForm.link)

    @router.callback_query(F.data.startswith("pay_"))
    async def handle_inline_payment(callback: types.CallbackQuery, state: FSMContext):
        code = callback.data.replace("pay_", "")
        cursor.execute("SELECT amount FROM orders WHERE code = ? AND user_id = ?", (code, callback.from_user.id))
        result = cursor.fetchone()
        if not result:
            return await callback.message.answer("‚ùó –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")

        amount = result[0]
        if not amount:
            return await callback.message.answer("‚ùó –°—É–º–º–∞ –µ—â—ë –Ω–µ —É–∫–∞–∑–∞–Ω–∞. –ü–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –µ—ë –¥–æ–±–∞–≤–∏—Ç.")

        await callback.message.answer(
            f"üí∞ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: <b>{amount} ‚ÇΩ</b>\n"
            "üí≥ –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –Ω–∞ –∫–∞—Ä—Ç—É (–í–¢–ë –±–∞–Ω–∫):\n"
            "<code>89780520940</code>\n"
            "–£–ú–ï–†–û–í–ê –≠.–ò.\n\n"
            "üì∏ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.",
            parse_mode="HTML"
        )
    @router.message(OrderForm.link)
    async def get_link(message: Message, state: FSMContext):
        await state.update_data(link=message.text)
        await state.set_state(OrderForm.details)
        await message.answer("üìå –£–∫–∞–∂–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å(—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª, —Ü–≤–µ—Ç, —Ä–∞–∑–º–µ—Ä –∏ —Ç.–¥.) –∏–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–æ–≤–æ '–Ω–µ—Ç' "":", reply_markup=user_menu)

    @router.message(OrderForm.details)
    async def get_details(message: Message, state: FSMContext):
        await state.update_data(details=message.text)
        await state.set_state(OrderForm.quantity)
        await message.answer("üî¢ –°–∫–æ–ª—å–∫–æ —à—Ç—É–∫:", reply_markup=user_menu)

    @router.message(OrderForm.quantity)
    async def get_quantity(message: Message, state: FSMContext):
        await state.update_data(quantity=message.text)
        data = await state.get_data()
        code = generate_order_code()
        now = datetime.now().strftime("%Y-%m-%d %H:%M")
        cursor.execute("INSERT INTO orders (code, link, details, quantity, user_id, created_at) VALUES (?, ?, ?, ?, ?, ?)",
                       (code, data['link'], data['details'], data['quantity'], message.from_user.id, now))
        conn.commit()
        await message.answer(f"‚úÖ –ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω! üÜî –ö–æ–¥ –∑–∞–∫–∞–∑–∞: <code>{code}</code> \n–û–∂–∏–¥–∞–π—Ç–µ! –ú—ã –ø–æ—Å—á–∏—Ç–∞–µ–º —Å—É–º–º—É –∏ –¥–æ–±–∞–≤–∏–º –≤ –∑–∞–∫–∞–∑. –°–ø–∞—Å–∏–±–æ!", parse_mode="HTML", reply_markup=user_menu)
        await state.clear()

    @router.message(PaymentForm.waiting_amount)
    async def receive_amount(message: Message, state: FSMContext):
        amount = message.text.strip()
        await state.clear()
        await message.answer(
            f"üí∞ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: <b>{amount} ‚ÇΩ</b>\n"
            "üí≥ –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –Ω–∞ –∫–∞—Ä—Ç—É (–í–¢–ë –±–∞–Ω–∫):\n<code>89780520940</code>\n–£–ú–ï–†–û–í–ê –≠.–ò.\n\n"
            "üì∏ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.",
            parse_mode="HTML"
        )

    @router.message(F.photo | F.document)
    async def receive_payment_proof(message: Message):
        file_id = message.photo[-1].file_id if message.photo else message.document.file_id
        cursor.execute("SELECT id, code FROM orders WHERE user_id = ? ORDER BY id DESC LIMIT 1",
                       (message.from_user.id,))
        order = cursor.fetchone()
        if not order:
            return await message.answer("‚ùó –ù–µ –Ω–∞–π–¥–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑. –û—Ñ–æ—Ä–º–∏—Ç–µ –µ–≥–æ —Å–Ω–∞—á–∞–ª–∞.")
        order_id, code = order
        cursor.execute("UPDATE orders SET check_file_id = ?, status = 'üïì –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è' WHERE id = ?",(file_id, order_id))
        conn.commit()
        await message.answer("‚úÖ –ß–µ–∫ –ø–æ–ª—É—á–µ–Ω, –æ–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.")
        for admin_id in ADMIN_IDS:
            try:
                await bot.send_message(admin_id,f"üì• –ù–æ–≤—ã–π —á–µ–∫ –Ω–∞ –∑–∞–∫–∞–∑ #{code} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}. –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
            except Exception as e:
                print(f"‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {admin_id}:", e)

    @router.callback_query(F.data.startswith("edit_"))
    async def edit_order_callback(callback: types.CallbackQuery, state: FSMContext):
        code = callback.data.replace("edit_", "")
        cursor.execute("SELECT status FROM orders WHERE code = ? AND user_id = ?", (code, callback.from_user.id))
        result = cursor.fetchone()
        if not result:
            return await callback.message.answer("‚ùó –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        if result[0] == "‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω":
            return await callback.message.answer("‚ùó –≠—Ç–æ—Ç –∑–∞–∫–∞–∑ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–∑–º–µ–Ω—ë–Ω.")
        await state.update_data(code=code)
        await state.set_state(EditForm.wait_new_details)
        cursor.execute("SELECT details FROM orders WHERE code = ?", (code,))
        details_result = cursor.fetchone()
        existing_details = details_result[0] if details_result else ""

        await callback.message.answer(
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ß—ë—Ä–Ω—ã–π XL):\n\n"
            f"üìù –¢–µ–∫—É—â–∏–µ: <code>{existing_details}</code>",
            parse_mode="HTML"
        )

    @router.message(EditForm.wait_new_details)
    async def update_details(message: Message, state: FSMContext):
        new_text = message.text.strip()
        data = await state.get_data()
        code = data["code"]
        cursor.execute("UPDATE orders SET details = ? WHERE code = ?", (new_text, code))
        conn.commit()
        await message.answer(f"‚úÖ –ó–∞–∫–∞–∑ #{code} –æ–±–Ω–æ–≤–ª—ë–Ω.")
        await state.clear()

    @router.callback_query(F.data.startswith("delete_"))
    async def delete_order_callback(callback: types.CallbackQuery):
        code = callback.data.replace("delete_", "")
        cursor.execute("SELECT id FROM orders WHERE code = ? AND user_id = ?", (code, callback.from_user.id))
        if not cursor.fetchone():
            return await callback.message.answer("‚ùó –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        cursor.execute("DELETE FROM orders WHERE code = ? AND user_id = ?", (code, callback.from_user.id))
        conn.commit()
        await callback.message.answer(f"üóë –ó–∞–∫–∞–∑ #{code} —É–¥–∞–ª—ë–Ω.")

    @router.message(SupportForm.waiting_message)
    async def handle_support_message(message: Message, state: FSMContext):
        await state.clear()
        now = datetime.now().strftime("%Y-%m-%d %H:%M")
        cursor.execute("INSERT INTO support_messages (user_id, sender, message, timestamp) VALUES (?, ?, ?, ?)",
                       (message.from_user.id, "user", message.text, now))
        conn.commit()
        text = (
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username or '‚Äî'} (id: <code>{message.from_user.id}</code>)"
            f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ:{message.text}")
        buttons = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_{message.from_user.id}")]])
        for admin_id in ADMIN_IDS:
            await bot.send_message(admin_id, text, parse_mode="HTML", reply_markup=buttons)
        await message.answer("‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.", reply_markup=user_menu)

    dp.include_router(router)
