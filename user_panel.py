from aiogram import F, Router, types, Bot
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from datetime import datetime
import random

user_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã"), KeyboardButton(text="üõç –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑")],
        [KeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∞"), KeyboardButton(text="üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞")],
    ],
    resize_keyboard=True
)

class OrderForm(StatesGroup):
    link = State()
    details = State()
    quantity = State()

class EditForm(StatesGroup):
    wait_code = State()
    wait_new_details = State()

class PaymentForm(StatesGroup):
    waiting_amount = State()

def generate_order_code():
    return f"{random.randint(1000, 9999)}"

def register_user_handlers(dp, conn, cursor, bot):
    router = Router()
    ADMIN_ID = 1174813870

    @router.message(F.text == "üõç –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑")
    async def start_order(message: Message, state: FSMContext):
        await message.answer("üîó –ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä c aliexpress.ru:", reply_markup=user_menu)
        await state.set_state(OrderForm.link)

    @router.callback_query(F.data == "start_order")
    async def handle_start_order_callback(callback: types.CallbackQuery, state: FSMContext):
        await callback.message.delete()
        await start_order(callback.message, state)  # –ø–æ–≤—Ç–æ—Ä–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è

    @router.message(OrderForm.link)
    async def get_link(message: Message, state: FSMContext):
        await state.update_data(link=message.text)
        await state.set_state(OrderForm.details)
        await message.answer("üìå –£–∫–∞–∂–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª, —Ü–≤–µ—Ç, —Ä–∞–∑–º–µ—Ä –∏ —Ç.–¥.):")

    @router.message(OrderForm.details)
    async def get_details(message: Message, state: FSMContext):
        await state.update_data(details=message.text)
        await state.set_state(OrderForm.quantity)
        await message.answer("üî¢ –°–∫–æ–ª—å–∫–æ —à—Ç—É–∫:")

    @router.message(OrderForm.quantity)
    async def get_quantity(message: Message, state: FSMContext):
        await state.update_data(quantity=message.text)
        data = await state.get_data()
        code = generate_order_code()
        now = datetime.now().strftime("%Y-%m-%d %H:%M")
        cursor.execute("INSERT INTO orders (code, link, details, quantity, user_id, created_at) VALUES (?, ?, ?, ?, ?, ?)",
                       (code, data['link'], data['details'], data['quantity'], message.from_user.id, now))
        conn.commit()
        await message.answer(f"‚úÖ –ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω –∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ!\nüí∞–°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞ –±—É–¥–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–∑–∂–µ. –û–∂–∏–¥–∞–π—Ç–µ... \nüÜî –ö–æ–¥ –∑–∞–∫–∞–∑–∞: <code>{code}</code>", parse_mode="HTML", reply_markup=user_menu)
        await state.clear()

    @router.message(F.text.in_(["üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã", "üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞"]))
    async def handle_common_buttons(message: Message, state: FSMContext):
        await state.clear()
        if message.text == "üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞":
            await message.answer("üìû –ù–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @dekkstr")
        elif message.text == "üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã":
            cursor.execute("SELECT code, link, details, quantity, status, created_at, amount FROM orders WHERE user_id = ?", (message.from_user.id,))
            rows = cursor.fetchall()
            if not rows:
                return await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.")
            for i, row in enumerate(rows, 1):
                code, link, details, quantity, status, created_at, amount = row
                product_link = f'<a href="{link}">–¢–æ–≤–∞—Ä {i}</a>' if link.startswith("http") else f"–¢–æ–≤–∞—Ä {i}"

                text = (
                    f"# {code}\n"
                    f"üîó {product_link}\n"
                    f"üìå {details}\n"
                    f"üî¢ {quantity} —à—Ç\n"
                    f"üì¶ –°—Ç–∞—Ç—É—Å: {status}\n"
                    f"üí∞ –°—É–º–º–∞: {amount or '‚Äî'} ‚ÇΩ"
                )
                buttons = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data=f"edit_{code}"),
                     InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{code}")]
                ])
                await message.answer(text, reply_markup=buttons, parse_mode="HTML", disable_web_page_preview=True)

    @router.message(F.text == "üí≥ –û–ø–ª–∞—Ç–∞")
    async def ask_payment_amount(message: Message, state: FSMContext):
        await state.set_state(PaymentForm.waiting_amount)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∫ –æ–ø–ª–∞—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1234.56):")

    @router.message(PaymentForm.waiting_amount)
    async def receive_amount(message: Message, state: FSMContext):
        amount = message.text.strip()
        await state.clear()
        await message.answer(
            f"üí∞ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ (–∑–∞ –≤—Å–µ –∑–∞–∫–∞–∑—ã): <b>{amount} ‚ÇΩ</b>\n"
            "üí≥ –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –Ω–∞ –∫–∞—Ä—Ç—É (–í–¢–ë –±–∞–Ω–∫):\n<code>89780520940</code>\n–£–ú–ï–†–û–í–ê –≠.–ò.\n\n"
            "üì∏ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.",
            parse_mode="HTML"
        )

    @router.message(F.photo | F.document)
    async def receive_payment_proof(message: Message):
        file_id = message.photo[-1].file_id if message.photo else message.document.file_id
        cursor.execute("SELECT id FROM orders WHERE user_id = ? ORDER BY id DESC LIMIT 1", (message.from_user.id,))
        order = cursor.fetchone()
        if order:
            order_id = order[0]
            cursor.execute("UPDATE orders SET check_file_id = ? WHERE id = ?", (file_id, order_id))
            conn.commit()
        await message.answer("‚úÖ –ß–µ–∫ –ø–æ–ª—É—á–µ–Ω, –æ–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.")

    @router.callback_query(F.data.startswith("edit_"))
    async def edit_order_callback(callback: types.CallbackQuery, state: FSMContext):
        code = callback.data.replace("edit_", "")
        cursor.execute("SELECT status FROM orders WHERE code = ? AND user_id = ?", (code, callback.from_user.id))
        result = cursor.fetchone()
        if not result:
            return await callback.message.answer("‚ùó –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        if result[0] == "‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω":
            return await callback.message.answer("‚ùó –≠—Ç–æ—Ç –∑–∞–∫–∞–∑ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–∑–º–µ–Ω—ë–Ω.")
        await state.update_data(code=code)
        await state.set_state(EditForm.wait_new_details)
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: –¶–≤–µ—Ç: —á—ë—Ä–Ω—ã–π, –†–∞–∑–º–µ—Ä: XL):")

    @router.message(EditForm.wait_new_details)
    async def update_details(message: Message, state: FSMContext):
        new_text = message.text.strip()
        data = await state.get_data()
        code = data["code"]
        cursor.execute("UPDATE orders SET details = ? WHERE code = ?", (new_text, code))
        conn.commit()
        await message.answer(f"‚úÖ –ó–∞–∫–∞–∑ #{code} –æ–±–Ω–æ–≤–ª—ë–Ω.")
        await state.clear()

    @router.callback_query(F.data.startswith("delete_"))
    async def delete_order_callback(callback: types.CallbackQuery):
        code = callback.data.replace("delete_", "")
        cursor.execute("SELECT id FROM orders WHERE code = ? AND user_id = ?", (code, callback.from_user.id))
        if not cursor.fetchone():
            return await callback.message.answer("‚ùó –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        cursor.execute("DELETE FROM orders WHERE code = ? AND user_id = ?", (code, callback.from_user.id))
        conn.commit()
        await callback.message.answer(f"üóë –ó–∞–∫–∞–∑ #{code} —É–¥–∞–ª—ë–Ω.")

    dp.include_router(router)