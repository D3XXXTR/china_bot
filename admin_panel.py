from aiogram import F, Router, Bot
from aiogram.types import (
    ReplyKeyboardMarkup, KeyboardButton, Message,
    InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
)
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

admin_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìã –í—Å–µ –∑–∞–∫–∞–∑—ã"), KeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑")],
        [KeyboardButton(text="üîç –ü–æ–∏—Å–∫ –ø–æ –∫–æ–¥—É"), KeyboardButton(text="üîÅ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å")],
        [KeyboardButton(text="‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ"), KeyboardButton(text="üïê –í –æ–∂–∏–¥–∞–Ω–∏–∏")],
        [KeyboardButton(text="üí∞ –£–∫–∞–∑–∞—Ç—å —Å—É–º–º—É"), KeyboardButton(text="üì® –û–ø–ª–∞—á–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã")]
    ],
    resize_keyboard=True
)

class SearchActions(StatesGroup):
    wait_code = State()

class AdminActions(StatesGroup):
    wait_delete_code = State()
    wait_edit_status = State()
    wait_amount = State()

def register_admin_handlers(dp, conn, cursor, admin_id, bot):
    router = Router()

    @router.message(F.text == "üìã –í—Å–µ –∑–∞–∫–∞–∑—ã")
    async def show_all_orders(message: Message):
        cursor.execute("SELECT code, link, details, quantity, status, created_at, amount FROM orders ORDER BY id DESC LIMIT 10")
        rows = cursor.fetchall()
        if not rows:
            return await message.answer("–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤.")
        text = "üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã:\n\n"
        for row in rows:
            text += (
                f"# {row[0]}\nüîó {row[1]}\nüìå {row[2]}\nüî¢ {row[3]} —à—Ç\n"
                f"üì¶ {row[4]}\nüïí {row[5]}\nüí∞ –°—É–º–º–∞: {row[6] or '‚Äî'} ‚ÇΩ\n\n"
            )
        await message.answer(text)

    @router.message(F.text == "üîç –ü–æ–∏—Å–∫ –ø–æ –∫–æ–¥—É")
    async def search_by_code_prompt(message: Message, state: FSMContext):
        await message.answer("–í–≤–µ–¥–∏—Ç–µ: [–∫–æ–¥ –∑–∞–∫–∞–∑–∞] ")
        await state.set_state(SearchActions.wait_code)

    @router.message(SearchActions.wait_code)
    async def search_by_code(message: Message, state: FSMContext):
        code = message.text.strip()
        cursor.execute("SELECT link, details, quantity, status FROM orders WHERE code = ?", (code,))
        result = cursor.fetchone()
        if result:
            await message.answer(
                f"# {code}\nüîó {result[0]}\nüìå {result[1]}\nüî¢ {result[2]} —à—Ç\nüì¶ –°—Ç–∞—Ç—É—Å: {result[3]}"
            )
        else:
            await message.answer("‚ùó –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()

    @router.message(F.text == "‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ")
    async def show_sent_orders(message: Message):
        cursor.execute("SELECT code, link, details, quantity, status FROM orders WHERE status = '‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω'")
        rows = cursor.fetchall()
        if not rows:
            return await message.answer("–ù–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.")
        text = "‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã:\n\n"
        for row in rows:
            text += (
                f"# {row[0]}\nüîó {row[1]}\nüìå {row[2]}\nüî¢ {row[3]} —à—Ç\nüì¶ {row[4]}\n\n"
            )
        await message.answer(text)

    @router.message(F.text == "üïê –í –æ–∂–∏–¥–∞–Ω–∏–∏")
    async def show_pending_orders(message: Message):
        cursor.execute("SELECT code, link, details, quantity, status FROM orders WHERE status = 'üïê –í –æ–∂–∏–¥–∞–Ω–∏–∏'")
        rows = cursor.fetchall()
        if not rows:
            return await message.answer("–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏.")
        text = "üïê –ó–∞–∫–∞–∑—ã –≤ –æ–∂–∏–¥–∞–Ω–∏–∏:\n\n"
        for row in rows:
            text += (
                f"# {row[0]}\nüîó {row[1]}\nüìå {row[2]}\nüî¢ {row[3]} —à—Ç\nüì¶ {row[4]}\n\n"
            )
        await message.answer(text)

    @router.message(F.text == "üí∞ –£–∫–∞–∑–∞—Ç—å —Å—É–º–º—É")
    async def ask_amount(message: Message, state: FSMContext):
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏ —Å—É–º–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1234 1490.50):")
        await state.set_state(AdminActions.wait_amount)

    @router.message(AdminActions.wait_amount)
    async def set_amount(message: Message, state: FSMContext):
        try:
            code, amount = message.text.strip().split(" ", 1)
            cursor.execute("UPDATE orders SET amount = ? WHERE code = ?", (amount, code))
            conn.commit()
            cursor.execute("SELECT user_id FROM orders WHERE code = ?", (code,))
            user = cursor.fetchone()
            if user:
                user_id = user[0]
                await bot.send_message(user_id,
                   f"üí∞ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ (–∑–∞ –≤—Å–µ –∑–∞–∫–∞–∑—ã): <b>{amount} ‚ÇΩ</b>\n"
                   "üí≥ –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –Ω–∞ –∫–∞—Ä—Ç—É (–í–¢–ë –±–∞–Ω–∫):\n<code>89780520940</code>\n–£–ú–ï–†–û–í–ê –≠.–ò.\n\n"
                   "üì∏ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.",
                    parse_mode="HTML"
                )
            await message.answer(f"‚úÖ –°—É–º–º–∞ {amount} ‚ÇΩ –¥–ª—è –∑–∞–∫–∞–∑–∞ #{code} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
        except:
            await message.answer("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ: –∫–æ–¥ —Å—É–º–º–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1234 1490.50)")
        await state.clear()

    @router.message(F.text == "üîÅ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å")
    async def ask_status_update(message: Message, state: FSMContext):
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å (–ø—Ä–∏–º–µ—Ä: 1234 ‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω):")
        await state.set_state(AdminActions.wait_edit_status)

    @router.message(AdminActions.wait_edit_status)
    async def update_status(message: Message, state: FSMContext):
        try:
            code, status = message.text.strip().split(" ", 1)
            cursor.execute("UPDATE orders SET status = ? WHERE code = ?", (status, code))
            conn.commit()
            cursor.execute("SELECT user_id FROM orders WHERE code = ?", (code,))
            user = cursor.fetchone()
            if user:
                await bot.send_message(user[0], f"üîî –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ #{code} –æ–±–Ω–æ–≤–ª—ë–Ω: {status}")
            await message.answer(f"‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ #{code} –æ–±–Ω–æ–≤–ª—ë–Ω.")
        except:
            await message.answer("‚ùó –§–æ—Ä–º–∞—Ç: 1234 ‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω")
        await state.clear()

    @router.message(F.text == "üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑")
    async def ask_delete(message: Message, state: FSMContext):
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∑–∞–∫–∞–∑–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
        await state.set_state(AdminActions.wait_delete_code)

    @router.message(AdminActions.wait_delete_code)
    async def delete_order(message: Message, state: FSMContext):
        code = message.text.strip()
        cursor.execute("DELETE FROM orders WHERE code = ?", (code,))
        conn.commit()
        await message.answer(f"üóë –ó–∞–∫–∞–∑ #{code} —É–¥–∞–ª—ë–Ω.")
        await state.clear()

    @router.message(F.text == "üì® –û–ø–ª–∞—á–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã")
    async def show_uploaded_checks(message: Message):
        cursor.execute("SELECT code, user_id, check_file_id FROM orders WHERE check_file_id IS NOT NULL ORDER BY id DESC LIMIT 10")
        rows = cursor.fetchall()
        if not rows:
            return await message.answer("–ù–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —á–µ–∫–æ–≤.")
        for code, user_id, file_id in rows:
            caption = f"üì• –ß–µ–∫ –Ω–∞ –∑–∞–∫–∞–∑ #{code}\nüë§ User ID: {user_id}"
            buttons = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"confirm_{code}")]
            ])
            if file_id.startswith("AgAC"):
                await bot.send_photo(message.chat.id, photo=file_id, caption=caption, reply_markup=buttons)
            else:
                await bot.send_document(message.chat.id, document=file_id, caption=caption, reply_markup=buttons)

    @router.callback_query(F.data.startswith("confirm_"))
    async def confirm_payment(callback: CallbackQuery):
        code = callback.data.replace("confirm_", "")
        cursor.execute("UPDATE orders SET status = 'üí≥ –û–ø–ª–∞—á–µ–Ω' WHERE code = ?", (code,))
        conn.commit()
        await callback.message.edit_reply_markup()
        await callback.message.answer(f"‚úÖ –ó–∞–∫–∞–∑ #{code} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π.")
        cursor.execute("SELECT user_id FROM orders WHERE code = ?", (code,))
        user = cursor.fetchone()
        if user:
            await bot.send_message(user[0], f"‚úÖ –í–∞—à –∑–∞–∫–∞–∑ #{code} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –∏ –æ–ø–ª–∞—á–µ–Ω.")

    dp.include_router(router)


