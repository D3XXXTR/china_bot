from aiogram import F, Router, Bot
from aiogram.types import (
    ReplyKeyboardMarkup, KeyboardButton, Message,
    InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
)

from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
import html
from aiogram.fsm.state import State, StatesGroup


class AdminState(StatesGroup):
    waiting_amount = State()
    wait_reply = State()
    wait_delete_code = State()
    search_code = State()



admin_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìã –í—Å–µ –∑–∞–∫–∞–∑—ã"), KeyboardButton(text="üîç –ü–æ–∏—Å–∫ –ø–æ –∫–æ–¥—É")],
        [KeyboardButton(text="üóÇ –í—Å–µ —á–∞—Ç—ã"), KeyboardButton(text="üì® –û–ø–ª–∞—á–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã")]
    ],
    resize_keyboard=True
)

def register_admin_handlers(dp, conn, cursor, ADMIN_IDS, bot):
    router = Router()

    @router.message(F.text == "üìã –í—Å–µ –∑–∞–∫–∞–∑—ã")
    async def show_all_orders(message: Message):

        cursor.execute("SELECT code, link, details, quantity, status, created_at, amount FROM orders ORDER BY id ASC")
        rows = cursor.fetchall()
        if not rows:
            return await message.answer("–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤.")

        for row in rows:
            code, link, details, quantity, status, created_at, amount = row
            safe_link = html.escape(link) if link and link.startswith("http") else ""
            product_link = f'<a href="{safe_link}">–¢–æ–≤–∞—Ä</a>' if safe_link else "–¢–æ–≤–∞—Ä"

            text = (
                f"# {code}\nüîó {product_link}\nüìå {details}\nüî¢ {quantity} —à—Ç\n"
                f"üì¶ {status}\nüïí {created_at}\nüí∞ –°—É–º–º–∞: {amount or '‚Äî'} ‚ÇΩ\n"
            )
            keyboard = [[InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"admin_delete_{code}")]]

            if status in ["üïê –í –æ–∂–∏–¥–∞–Ω–∏–∏", "–í –æ–∂–∏–¥–∞–Ω–∏–∏"]:
                keyboard.insert(0, [InlineKeyboardButton(text="üí∞ –£–∫–∞–∑–∞—Ç—å —Å—É–º–º—É", callback_data=f"setamount_{code}")])
            if amount and status not in ["‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω", "–ú–æ–∂–Ω–æ –∑–∞–±–∏—Ä–∞—Ç—å"]:
                keyboard.insert(0, [InlineKeyboardButton(text="üöö –û—Ç–ø—Ä–∞–≤–ª–µ–Ω", callback_data=f"mark_sent_{code}")])
            if status == "‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω":
                keyboard.insert(0, [InlineKeyboardButton(text="üì¶ –ú–æ–∂–Ω–æ –∑–∞–±–∏—Ä–∞—Ç—å", callback_data=f"ready_{code}")])

            buttons = InlineKeyboardMarkup(inline_keyboard=keyboard)

            await message.answer(text, parse_mode="HTML", disable_web_page_preview=True, reply_markup=buttons)

    @router.callback_query(F.data.startswith("ready_"))
    async def mark_ready(callback: CallbackQuery):
        code = callback.data.replace("ready_", "")
        cursor.execute("UPDATE orders SET status = '–ú–æ–∂–Ω–æ –∑–∞–±–∏—Ä–∞—Ç—å' WHERE code = ?", (code,))
        conn.commit()
        await callback.message.edit_reply_markup()
        await callback.answer("üì¶ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—ë–Ω –Ω–∞ '–ú–æ–∂–Ω–æ –∑–∞–±–∏—Ä–∞—Ç—å'")
        cursor.execute("SELECT user_id FROM orders WHERE code = ?", (code,))
        user = cursor.fetchone()
        if user:
            await bot.send_message(user[0], f"üì¶ –í–∞—à –∑–∞–∫–∞–∑ #{code} –º–æ–∂–Ω–æ –∑–∞–±–∏—Ä–∞—Ç—å!")

    @router.callback_query(F.data.startswith("admin_delete_"))
    async def admin_delete_order(callback: CallbackQuery):
        code = callback.data.replace("admin_delete_", "")
        cursor.execute("DELETE FROM orders WHERE code = ?", (code,))
        conn.commit()
        await callback.message.edit_text(f"üóë –ó–∞–∫–∞–∑ #{code} —É–¥–∞–ª—ë–Ω.")
        await callback.answer("–£–¥–∞–ª–µ–Ω–æ")

    @router.callback_query(F.data.startswith("setamount_"))
    async def ask_amount(callback: CallbackQuery, state: FSMContext):
        code = callback.data.replace("setamount_", "")
        await state.set_state(AdminState.waiting_amount)
        await state.update_data(code=code)
        await callback.message.answer(f"üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –∑–∞–∫–∞–∑–∞ #{code}:")

    @router.callback_query(F.data.startswith("mark_sent_"))
    async def mark_order_sent(callback: CallbackQuery):
        code = callback.data.replace("mark_sent_", "")
        cursor.execute("UPDATE orders SET status = '‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω' WHERE code = ?", (code,))
        conn.commit()
        await callback.message.edit_reply_markup()
        await callback.answer("üì¶ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—ë–Ω")
        await callback.message.answer(f"‚úÖ –ó–∞–∫–∞–∑ #{code} –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π.")
        cursor.execute("SELECT user_id FROM orders WHERE code = ?", (code,))
        user = cursor.fetchone()
        if user:
            await bot.send_message(user[0], f"üöö –í–∞—à –∑–∞–∫–∞–∑ #{code} –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –û–∂–∏–¥–∞–π—Ç–µ –¥–æ—Å—Ç–∞–≤–∫—É –≤ –°–∏–º—Ñ–µ—Ä–æ–ø–æ–ª—å.")

    @router.message(F.text == "üîç –ü–æ–∏—Å–∫ –ø–æ –∫–æ–¥—É")
    async def search_by_code_prompt(message: Message, state: FSMContext):
        await message.answer("–í–≤–µ–¥–∏—Ç–µ: [–∫–æ–¥ –∑–∞–∫–∞–∑–∞] ")
        await state.set_state(AdminState.search_code)

    @router.message(AdminState.search_code)
    async def search_by_code(message: Message, state: FSMContext):
        code = message.text.strip()
        cursor.execute("SELECT link, details, quantity, status, created_at, amount FROM orders WHERE code = ?", (code,))
        result = cursor.fetchone()
        if result:
            link, details, quantity, status, created_at, amount = result
            safe_link = html.escape(link) if link and link.startswith("http") else ""
            product_link = f'<a href="{safe_link}">–¢–æ–≤–∞—Ä</a>' if safe_link else "–¢–æ–≤–∞—Ä"
            await message.answer(
                f"# {code}\n"
                f"üîó {product_link}\n"
                f"üìå {details}\n"
                f"üî¢ {quantity} —à—Ç\n"
                f"üì¶ –°—Ç–∞—Ç—É—Å: {status}\n"
                f"üïí {created_at}\n"
                f"üí∞ –°—É–º–º–∞: {amount or '‚Äî'} ‚ÇΩ",
                parse_mode="HTML",
                disable_web_page_preview=True
            )
        else:
            await message.answer("‚ùó –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()


    @router.message(AdminState.waiting_amount)
    async def set_amount(message: Message, state: FSMContext):
        try:
            amount = ''.join(c for c in message.text if c.isdigit() or c == '.').strip()
            data = await state.get_data()
            code = data.get("code")

            if not code:
                return await message.answer("‚ùó –û—à–∏–±–∫–∞: –∫–æ–¥ –∑–∞–∫–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏.")

            cursor.execute("UPDATE orders SET amount = ?, status = '–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã' WHERE code = ?", (amount, code))
            conn.commit()

            cursor.execute("SELECT user_id FROM orders WHERE code = ?", (code,))
            user = cursor.fetchone()
            if user:
                user_id = user[0]
                await bot.send_message(
                    user_id,
                    f"üìå –ó–∞–∫–∞–∑ #{code} –æ–±–Ω–æ–≤–ª—ë–Ω. –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {amount} ‚ÇΩ.\n–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ 'üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã', —á—Ç–æ–±—ã –æ–ø–ª–∞—Ç–∏—Ç—å."
                )

            await message.answer(f"‚úÖ –°—É–º–º–∞ {amount} ‚ÇΩ –¥–ª—è –∑–∞–∫–∞–∑–∞ #{code} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
        except Exception as e:
            print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Å—É–º–º—ã:", e)
            await message.answer("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1490.50)")
        await state.clear()

    @router.message(F.text == "üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑")
    async def ask_delete(message: Message, state: FSMContext):
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∑–∞–∫–∞–∑–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
        await state.set_state(AdminState.wait_delete_code)

    @router.message(AdminState.wait_delete_code)
    async def delete_order(message: Message, state: FSMContext):
        code = message.text.strip()
        cursor.execute("DELETE FROM orders WHERE code = ?", (code,))
        conn.commit()
        await message.answer(f"üóë –ó–∞–∫–∞–∑ #{code} —É–¥–∞–ª—ë–Ω.")
        await state.clear()

    @router.message(F.text == "üì® –û–ø–ª–∞—á–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã")
    async def show_uploaded_checks(message: Message):
        cursor.execute("SELECT code, user_id, check_file_id FROM orders WHERE check_file_id IS NOT NULL AND status = 'üïì –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è' ORDER BY id DESC LIMIT 10")
        rows = cursor.fetchall()
        if not rows:
            return await message.answer("–ù–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —á–µ–∫–æ–≤.")
        for code, user_id, file_id in rows:
            caption = f"üì• –ß–µ–∫ –Ω–∞ –∑–∞–∫–∞–∑ #{code}\nüë§ User ID: {user_id}"
            buttons = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"confirm_{code}")]
            ])
            if file_id.startswith("AgAC"):
                await bot.send_photo(message.chat.id, photo=file_id, caption=caption, reply_markup=buttons)
            else:
                await bot.send_document(message.chat.id, document=file_id, caption=caption, reply_markup=buttons)

    @router.callback_query(F.data.startswith("confirm_"))
    async def confirm_payment(callback: CallbackQuery):
        code = callback.data.replace("confirm_", "")
        cursor.execute("UPDATE orders SET status = 'üí≥ –û–ø–ª–∞—á–µ–Ω' WHERE code = ?", (code,))
        conn.commit()
        await callback.message.edit_reply_markup()
        await callback.message.answer(f"‚úÖ –ó–∞–∫–∞–∑ #{code} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π.")
        cursor.execute("SELECT user_id FROM orders WHERE code = ?", (code,))
        user = cursor.fetchone()
        if user:
            await bot.send_message(user[0], f"‚úÖ –í–∞—à –∑–∞–∫–∞–∑ #{code} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –∏ –æ–ø–ª–∞—á–µ–Ω.")

    @router.message(F.text == "üóÇ –í—Å–µ —á–∞—Ç—ã")
    async def show_all_chats(message: Message):
        cursor.execute(
            "SELECT user_id, MAX(id) as last_id FROM support_messages GROUP BY user_id ORDER BY last_id DESC")
        users = cursor.fetchall()
        if not users:
            return await message.answer("–ù–µ—Ç —á–∞—Ç–æ–≤ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.")

        for user_id, _ in users:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∑–∞–∫–∞–∑
            cursor.execute("SELECT details, code FROM orders WHERE user_id = ? ORDER BY id DESC LIMIT 1", (user_id,))
            row = cursor.fetchone()
            summary = f"üßæ –ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑: #{row[1]} ‚Äî {row[0]}" if row else ""

            # –ü–æ–ª—É—á–∞–µ–º username –∏ –∏–º—è –∏–∑ –º–µ—Ç–æ–¥–∞ get_chat
            try:
                user = await bot.get_chat(user_id)
                username = f"@{user.username}" if user.username else "‚Äî"
                full_name = f"{user.first_name or ''} {user.last_name or ''}".strip()
                user_link = f'<a href="tg://user?id={user.id}">{full_name or username}</a>'
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å info –æ user_id={user_id}:", e)
                username = "‚Äî"
                full_name = "‚Äî"
                user_link = f"ID: {user_id}"

            buttons = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_{user_id}"),
                    InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å —á–∞—Ç", callback_data=f"deletechat_{user_id}")
                ]
            ])

            text = (
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_link}\n"
                f"üÜî ID: <code>{user_id}</code>\n"
                f"üì¶ –ö–æ–¥ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–∫–∞–∑–∞: #{row[1]}" if row else ""
            )
            await message.answer(text, reply_markup=buttons, parse_mode="HTML")

    @router.callback_query(F.data.startswith("deletechat_"))
    async def delete_chat(callback: CallbackQuery):
        user_id = int(callback.data.replace("deletechat_", ""))
        cursor.execute("DELETE FROM support_messages WHERE user_id = ?", (user_id,))
        conn.commit()
        await callback.message.edit_text(f"üóë –ß–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º  <code>{user_id}</code> —É–¥–∞–ª—ë–Ω.", parse_mode="HTML")
        await callback.answer()

    @router.callback_query(F.data.startswith("reply_"))
    async def start_reply(callback: CallbackQuery, state: FSMContext):
        await state.clear()  # ‚Üê –í–ê–ñ–ù–û: –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        user_id = int(callback.data.replace("reply_", ""))
        await state.set_state(AdminState.wait_reply)
        await state.update_data(reply_user_id=user_id)
        await callback.message.answer(f"‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID {user_id}")
        await callback.answer()

    @router.message(AdminState.wait_reply)
    async def send_admin_reply(message: Message, state: FSMContext):
        data = await state.get_data()
        user_id = data.get("reply_user_id")
        if user_id:
            try:
                buttons = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚úâÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"user_reply_{message.from_user.id}")]
                ])
                await bot.send_message(user_id, f"üì¨ –û—Ç–≤–µ—Ç –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n\n{message.text}", reply_markup=buttons)
                await message.answer("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}:", e)
                await message.answer("‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –í–æ–∑–º–æ–∂–Ω–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.")

        else:
            await message.answer("‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        await state.clear()

    dp.include_router(router)